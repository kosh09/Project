#################################################################### 
###############################  전방  ##############################
####################################################################
############     sens3          sens2          sens1      ##########
####################################################################
####################################################################
############     sens8     ###############     sens7      ##########
####################################################################
####################################################################
############     sens4          sens5          sens6      ##########
#################################################################### 
###############################  후방  ##############################
####################################################################
import time


# 주차프로세스가 메인함수에서 돌아갈때는 노란 불이 지속적으로 깜빡거리게 해주며
# sens5 가 벽과 가까워질때 부저가 울리도록 하자

def Parking_Sequence(sens1, sens2, sens3, sens4, sens5, sens6, sens7, sens8):
####################################################################
######################   우측 후면주차프로세싱   ######################
####################################################################
    for i in range(1,9):
        sensi = float(sensi)
    
    if sens1 < and sens1 > and sen6 > and sens6 < :
        H()                     # 정지를 시켜준다 
        S()                     # 방향을 앞쪽으로 바꿔준다
        time.sleep(3)           # 3초동안 잠시 쉬도록 한다
        L30()                   # 왼쪽으로 최고로 틀어준다
        F()                     # 앞으로 가준다
        if sens4 > and sens4 < : #
            H()                 # 일단 멈춘다
            time.sleep(2)       # 1초동안 딜레이를 가진다.
            B_R30()             # 오른쪽으로 꺾어주고 뒤로 간다.
            if sens4 > and sens4 < and sens5 > and sens5 < and sens6 > and sens6 < :
                H()             # 일단 멈춘다.
                time.sleep(2)   # 1초동안 딜레이를 가진다.
                B_S()           # 정확하게 멈춰주도록 한다.
                if sens5 > and sens5 < :
                    H()         # 정지시켜준다
                    break       # 시퀸스를 멈추도록 한다
                                # 이 이후에는 주행 시퀸스로 갈 수 있도록 설계하자

####################################################################
######################   좌측 후면주차프로세싱   ######################
####################################################################
    elif sens3 < and sens3 > and sens4 > and sens4 < :
        H()                     # 정지를 시켜준다
        S()                     # 방향을 앞쪽으로 바꾼다
        time.sleep(3)           # 3초동안 쉬도록 한다
        R30()                   # 오른쪽으로 최고로 틀어준다
        F()                     # 앞으로 가준다
        if sens6 > && sens6 < : #
            H()                 # 일단 멈춘다
            time.sleep(2)       # 1초동안 딜레이를 가진다.
            B_L30()             # 오른쪽으로 꺾어주고 뒤로 간다.
            if sens4 > and sens4 < and sens5 > and sens5 < and sens6 > and sens6 < :
                H()             # 일단 멈춘다.
                time.sleep(2)   # 1초동안 딜레이를 가진다.
                B_S()           # 정확하게 멈춰주도록 한다.
                if sens5 > and sens5 < :
                    H()         # 정지시켜준다
                    break       # 시퀸스를 멈추도록 한다
                                # 이 이후에는 주행 시퀸스로 갈 수 있도록 설계하자

####################################################################
######################   우측 측면주차프로세싱   ######################
####################################################################
    elif:



####################################################################
######################   좌측 측면주차프로세싱   ######################
####################################################################
    elif:
